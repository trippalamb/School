(* Extended Backus-Naur Form for Significance Language *)
(* Supports arithmetic operations with uncertainty, variables, assignments, and comments *)

(* Entry point *)
program ::= statement*

(* Statements *)
statement ::= variable_declaration
            | assignment
            | expression_statement
            | comment

(* Variable declaration *)
variable_declaration ::= "{" identifier ":" type "}"

(* Type system *)
type ::= "real"

(* Assignment *)
assignment ::= identifier ":=" expression

(* Expression statement (gets printed to console) *)
expression_statement ::= expression

(* Comments *)
comment ::= "#" comment_text? newline

comment_text ::= ( letter | digit | whitespace_char | symbol )*

(* Expressions *)
expression ::= term

(* Addition and Subtraction (lowest precedence) *)
term ::= factor ( ( "+" | "-" ) factor )*

(* Multiplication, Division, and Modulus *)
factor ::= power ( ( "*" | "/" | "%" ) power )*

(* Exponentiation and Root (right-associative) *)
power ::= unary ( ( "**" | "//" ) unary )?

(* Unary operations (unary minus/plus) *)
unary ::= ( "+" | "-" )? primary

(* Primary expressions (highest precedence) *)
primary ::= number_with_uncertainty
          | variable
          | function_call
          | "(" expression ")"

(* Numbers with optional uncertainty *)
number_with_uncertainty ::= number_scientific ( "+/-" number_scientific )?

(* Function calls *)
function_call ::= identifier "(" argument_list? ")"

(* Function arguments *)
argument_list ::= expression ( "," expression )*

(* Variables and function names *)
variable ::= identifier

(* Identifier definition *)
identifier ::= letter ( letter | digit | "_" )*

(* Numbers *)
number ::= integer_part ( "." fractional_part )?

(* Scientific notation numbers *)
number_scientific ::= number ( exponent_part )?

exponent_part ::= ( "e" | "E" ) ( "+" | "-" )? digit+

integer_part ::= digit+

fractional_part ::= digit+

(* Basic character definitions *)
letter ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" 
         | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" 
         | "u" | "v" | "w" | "x" | "y" | "z"
         | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" 
         | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" 
         | "U" | "V" | "W" | "X" | "Y" | "Z"

digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

(* Character definitions *)
newline ::= "\n" | "\r\n" | "\r"

whitespace_char ::= " " | "\t"

symbol ::= "!" | "@" | "$" | "^" | "&" | "?" | ":" | ";" | "," | "." | "<" | ">" | "~" | "`"
         | "[" | "]" | "{" | "}" | "|" | "\\" | "'" | "\"" | "+" | "-" | "*" | "/" | "%" | "=" | "(" | ")"

(* Whitespace (typically ignored by lexer except in comments) *)
whitespace ::= whitespace_char | newline